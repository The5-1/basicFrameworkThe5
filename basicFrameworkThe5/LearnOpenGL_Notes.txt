+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0.	Glew or Glad
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
For better OpenGL-Functions take Glew or Glad
http://glad.dav1d.de/
Version Glad: 3.3

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1.	Structs
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Structs in OpenGL:
Structs have a great property in C++ that their memory layout is sequential.
That is if we were to represent a struct as an array of data it would only contain
the struct's variables in sequential order which directly translates to a float 
(actually byte) array that we want for an array buffer

Vertex vertex;
vertex.Position  = glm::vec3(0.2f, 0.4f, 0.6f);
vertex.Normal    = glm::vec3(0.0f, 1.0f, 0.0f);
vertex.TexCoords = glm::vec2(1.0f, 0.0f);

// = [0.2f, 0.4f, 0.6f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f];


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2.	gl_FragCoord 
http://www.txutxi.com/?p=182
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

gl_FragCoord contains the relative windows coordinates (x, y, z, 1/w) values for the fragment.
The first two values (x,y) contain the pixel’s center coordinates where the fragment is being rendered.

For instance, with a frame buffer resolution of 800×600, a fragment being rendered in the bottom-left corner 
would fall over the pixel position (0.5,0.5); a fragment rendered into the most top-right corner would have 
coordinates (799.5, 599.5). For applications that use multi-sampling these values may fall elsewhere on the pixel area.

The third value (z) is the fragment’s depth mapped in the non-linear range [0,1]. It maps fragment depths from [znear, zfar] to [0,1].

// Converting (x,y,z) to range [0,1]
float x = gl_FragCoord.x/screenWidth;
float y = gl_FragCoord.y/screenHeight;
float z = gl_FragCoord.z; // Already in range [0,1]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3.	Position reconstruction
http://www.txutxi.com/?p=83
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3.	Buffer Object Streaming
https://www.khronos.org/opengl/wiki/Buffer_Object_Streaming
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/particles-instancing/

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4.	Vertex Array Objects (VAO)
https://stackoverflow.com/questions/5970087/understanding-vertex-array-objects-glgenvertexarrays
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Either create a VAO via:
glGenVertexArrays(GLsizei n, GLuint *arrays);
glBindVertexArray(GLuint);

Bind VBO without creating a specific VAO:
glGenVertexArrays()
glVertexAttribPointer()